<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <!-- Общие значения -->
    <FontFamily x:Key="AppFontFamily">Segoe UI</FontFamily>
    <system:Double x:Key="AppFontSize">12</system:Double>
    <Thickness x:Key="AppMargin">10</Thickness>
    <FontWeight x:Key="AppFontWeight">Normal</FontWeight>
    <!-- Шаблон для окна -->
    <ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type Window}">
        <Border
            BorderBrush="{DynamicResource WindowBorderBrush}"
            BorderThickness="1"
            Background="{TemplateBinding Background}">
            <Grid Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <!-- Заголовок окна - убираем отступы сверху -->
                <Grid x:Name="PART_HeaderGrid"
                      Grid.Row="0"
                      Background="{DynamicResource WindowBackgroundBrush}"
                      Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag.HeaderHeight, FallbackValue=32}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- Заголовок -->
                    <DockPanel Grid.Column="0"
                               LastChildFill="True">
                        <!-- Добавляем TextBlock с привязкой к Title окна -->
                        <TextBlock VerticalAlignment="Center"
                                   Margin="10,0,0,0"
                                   FontWeight="Medium"
                                   FontFamily="{StaticResource AppFontFamily}"
                                   FontSize="13">
                            <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"
                                 Foreground="{DynamicResource TitleWindowBrush}" />
                        </TextBlock>

                        <!-- Если нужен кастомный заголовок, он добавится после текста -->
                        <ContentPresenter DockPanel.Dock="Right"
                                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HeaderContent}"
                                          VerticalAlignment="Center" />
                    </DockPanel>

                    <!-- Кнопки управления окном -->
                    <Button x:Name="MinimizeButton"
                            Grid.Row="0" Grid.Column="1"
                            Content="&#xE921;"
                            Style="{DynamicResource WindowButtonStyle}" />

                    <Button x:Name="MaximizeButton"
                            Grid.Row="0" Grid.Column="2"
                            Content="&#xE922;"

                            Style="{DynamicResource WindowButtonStyle}" />
                    <Button x:Name="CloseButton"
                            Grid.Row="0" Grid.Column="3"
                            Content="&#xE8BB;"
                            Style="{DynamicResource CloseButtonStyle}" />
                </Grid>

                <!-- Содержимое окна -->
                <ContentPresenter Grid.Row="2" Content="{TemplateBinding Content}" />

            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentIsMouseOvertBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelectedBrush }" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Grid" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush }" />
    </Style>

    <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush }" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Margin" Value="{StaticResource AppMargin}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                CornerRadius="4,4,0,0"
                                Background="{DynamicResource GroupBoxHeaderBrush}">
                            <TextBlock
                                FontFamily="{StaticResource AppFontFamily}"
                                Margin="10,5"
                                FontWeight="SemiBold">
                                <Run Text="{TemplateBinding Header}"
                                     Foreground="{DynamicResource GroupBoxContentBrush}" />
                            </TextBlock>
                        </Border>
                        <Border Grid.Row="1"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{DynamicResource ContentBrush }"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ListBox -->
    <Style x:Key="ModernListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <!-- Шаблон для ListBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer Style="{DynamicResource CustomScrollViewerStyle}"
                                      Focusable="false">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Стиль для элементов ListBox -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Padding" Value="6,6" />
                    <Setter Property="Margin" Value="0,2" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="0"
                                        CornerRadius="4"
                                        Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="8" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Индикатор выбранного элемента -->
                                        <Border x:Name="SelectionIndicator"
                                                Width="3"
                                                HorizontalAlignment="Left"
                                                Background="{DynamicResource SelectionIndicatorBrush}"
                                                CornerRadius="1.5"
                                                Opacity="0" />

                                        <!-- ContentPresenter для отображения содержимого -->
                                        <ContentPresenter Grid.Column="1"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Border>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush1}" />
                                    </Trigger>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush2}" />
                                    </Trigger>

                                    <!-- Ваши остальные триггеры -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                                        <Setter Property="Cursor" Value="Hand" />
                                    </Trigger>
                                    <!-- При выборе элемента -->
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                                        <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1" />
                                    </Trigger>
                                    <!-- Триггер для отключенного состояния -->
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

   <!-- Стиль для анимированного чекбокса -->
   <Style x:Key="JellyCheckboxStyle" TargetType="CheckBox">
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="CheckBox">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <!-- Контейнер для чекбокса -->
                    <Border x:Name="CheckboxBorder"
                            Width="24" Height="24"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource Border1Brush}"
                            Background="Transparent" 
                            CornerRadius="3"
                            VerticalAlignment="Center"
                            RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <ScaleTransform x:Name="CheckboxScale" ScaleX="1" ScaleY="1" />
                        </Border.RenderTransform>
                        <!-- Галочка внутри чекбокса -->
                        <Path x:Name="Checkmark"
                              Stroke="White"
                              StrokeThickness="2"
                              Data="M 6,12 L 10,16 L 18,7"
                              Visibility="Hidden" 
                              Opacity="0"         
                              RenderTransformOrigin="0.5,0.5">
                             <Path.RenderTransform>
                                 <ScaleTransform x:Name="CheckmarkScale" ScaleX="0" ScaleY="0" />
                             </Path.RenderTransform>
                         </Path>
                    </Border>

                    <!-- Контент (текст или другой элемент) чекбокса -->
                    <ContentPresenter Grid.Column="1"
                                      Margin="5,0,0,0"
                                      VerticalAlignment="Center"
                                      Content="{TemplateBinding Content}"
                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      RecognizesAccessKey="True" />
                </Grid>

                <!-- Триггеры на основе DataTrigger -->
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True">
                        <!-- 1. Устанавливаем цвет фона БЕЗ анимации -->
                        <Setter TargetName="CheckboxBorder" Property="Background" Value="{DynamicResource SetupButtonBrush}" />

                        <!-- 2. Запускаем анимации галочки и "желе" при активации триггера -->
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!-- Анимация видимости и масштаба галочки -->
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark" Storyboard.TargetProperty="Visibility">
                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>
                                    <DoubleAnimation Storyboard.TargetName="Checkmark" Storyboard.TargetProperty="Opacity"
                                                     To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />
                                    <DoubleAnimation Storyboard.TargetName="CheckmarkScale" Storyboard.TargetProperty="ScaleX"
                                                     To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />
                                    <DoubleAnimation Storyboard.TargetName="CheckmarkScale" Storyboard.TargetProperty="ScaleY"
                                                     To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />

                                    <!-- Анимация желе для чекбокса -->
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale" Storyboard.TargetProperty="ScaleX">
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="1.25" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="0.75" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="1.15" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="0.95" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="1.05" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale" Storyboard.TargetProperty="ScaleY">
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="0.75" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="1.25" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="0.85" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="1.05" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="0.95" />
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>

                        <!-- 3. Запускаем анимацию скрытия галочки при деактивации триггера -->
                        <DataTrigger.ExitActions>
                             <BeginStoryboard>
                                <Storyboard>
                                    <!-- Скрываем галочку -->
                                    <DoubleAnimation Storyboard.TargetName="Checkmark" Storyboard.TargetProperty="Opacity"
                                                     To="0" Duration="0:0:0.2" />
                                    <DoubleAnimation Storyboard.TargetName="CheckmarkScale" Storyboard.TargetProperty="ScaleX"
                                                     To="0" Duration="0:0:0.2" />
                                    <DoubleAnimation Storyboard.TargetName="CheckmarkScale" Storyboard.TargetProperty="ScaleY"
                                                     To="0" Duration="0:0:0.2" />
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark" Storyboard.TargetProperty="Visibility"
                                                                   BeginTime="0:0:0.2"> <!-- Скрываем после затухания -->
                                        <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Hidden}" />
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False">
                        <!-- Устанавливаем прозрачный фон БЕЗ анимации, когда чекбокс не отмечен -->
                        <Setter TargetName="CheckboxBorder" Property="Background" Value="Transparent" />
                        <!-- Enter/Exit Actions здесь не нужны, так как анимация скрытия/показа галочки
                             обрабатывается в Exit/Enter Actions триггера для IsChecked="True" -->
                    </DataTrigger>

                    <!-- Можно добавить другие триггеры, например, для IsMouseOver, IsPressed, IsEnabled -->
                    <Trigger Property="IsMouseOver" Value="True">
                        <!-- Пример: немного увеличить рамку при наведении -->
                         <Setter TargetName="CheckboxBorder" Property="BorderBrush" Value="{DynamicResource Border2Brush}" /> <!-- Пример другого ресурса -->
                    </Trigger>
                     <Trigger Property="IsEnabled" Value="False">
                         <Setter TargetName="CheckboxBorder" Property="Opacity" Value="0.5" />
                         <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/> <!-- Пример -->
                    </Trigger>

                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
</Style>
    
     <!-- Стиль для кнопки "Добавить" -->
    <Style x:Key="AddButtonStyle" TargetType="Button">
     
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <!-- <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" /> -->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <TextBlock x:Name="ButtonText"
                                           Text="{TemplateBinding Content}"
                                           Foreground="White"
                                           FontWeight="SemiBold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Margin="0,0,39,0" />

                                <Border x:Name="IconBorder"
                                        HorizontalAlignment="Right"
                                        Width="39"><!-- Background="{DynamicResource SetupButtonBrush2}" -->
                                    <Path x:Name="PlusIcon"
                                          Data="M 12,6 L 12,18 M 6,12 L 18,12"
                                          Stroke="White"
                                          StrokeThickness="2"
                                          Width="24"
                                          Height="24"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="148" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,0,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="39" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,39,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter TargetName="IconBorder" Property="Background"
                                    Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#CCCCCC" />
                            <Setter Property="BorderBrush" Value="#AAAAAA" />
                            <Setter TargetName="IconBorder" Property="Background" Value="#AAAAAA" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="#888888" />
                            <Setter TargetName="PlusIcon" Property="Stroke" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    

    <Style x:Key="BorderFolding" TargetType="Border">
        <Setter Property="Margin" Value="5 10 5 3" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

   

    <Style x:Key="CustomScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track"
                                   IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageUpCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource VerticalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageDownCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HorizontalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageLeftCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource HorizontalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageRightCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для вертикального ползунка -->
    <Style x:Key="VerticalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Width="6"
                               Opacity="0.6"
                               MinHeight="30" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для горизонтального ползунка -->
    <Style x:Key="HorizontalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Height="6"
                               Opacity="0.6"
                               MinWidth="30" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ScrollViewer -->
    <Style x:Key="CustomScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2" />

                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Style="{StaticResource CustomScrollBarStyle}" />

                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Orientation="Horizontal"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Style="{StaticResource HorizontalScrollBarStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CommonButton" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="Padding" Value="12,8" /> <!-- Горизонтальный отступ 12, вертикальный 8 -->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" /> <!-- Убрать минимальную ширину -->
        <Setter Property="MinHeight" Value="0" /> <!-- Убрать минимальную высоту -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            BorderThickness="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OutlineCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Padding" Value="15,8" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <ContentPresenter VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WindowBackgroundColor}" />
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
    </Style>
</ResourceDictionary>