<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:converters="clr-namespace:NoNameApi.Views.Converters">
    <converters:ScaleConverter x:Key="ScaleConverter" />
    <converters:ScaleMarginConverter x:Key="ScaleMarginConverter" />
    <converters:MultiplyConverter x:Key="MultiplyConverter" />
    <converters:NegationConverter x:Key="NegationConverter" />
    
    <!-- Общие значения -->
    <FontFamily x:Key="AppFontFamily">Segoe UI</FontFamily>
    <system:Double x:Key="AppFontSize">12</system:Double>
    <Thickness x:Key="AppMargin">10</Thickness>
    <FontWeight x:Key="AppFontWeight">Normal</FontWeight>
    <!-- Шаблон для окна -->
    <ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type Window}">
        <Border
            BorderBrush="{DynamicResource WindowBorderBrush}"
            BorderThickness="1"
            Background="{TemplateBinding Background}">
            <Grid Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <!-- Заголовок окна - убираем отступы сверху -->
                <Grid x:Name="PART_HeaderGrid"
                      Grid.Row="0"
                      Background="{DynamicResource WindowBackgroundBrush}"
                      Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag.HeaderHeight, FallbackValue=32}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- Заголовок -->
                    <DockPanel Grid.Column="0"
                               LastChildFill="True">
                        <!-- Добавляем TextBlock с привязкой к Title окна -->
                        <TextBlock VerticalAlignment="Center"
                                   Margin="10,0,0,0"
                                   FontWeight="Medium"
                                   FontFamily="{StaticResource AppFontFamily}"
                                   FontSize="13">
                            <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"
                                 Foreground="{DynamicResource TitleWindowBrush}" />
                        </TextBlock>

                        <!-- Если нужен кастомный заголовок, он добавится после текста -->
                        <ContentPresenter DockPanel.Dock="Right"
                                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HeaderContent}"
                                          VerticalAlignment="Center" />
                    </DockPanel>

                    <!-- Кнопки управления окном -->
                    <Button x:Name="MinimizeButton"
                            Grid.Row="0" Grid.Column="1"
                            Content="&#xE921;"
                            Style="{DynamicResource WindowButtonStyle}" />

                    <Button x:Name="MaximizeButton"
                            Grid.Row="0" Grid.Column="2"
                            Content="&#xE922;"

                            Style="{DynamicResource WindowButtonStyle}" />
                    <Button x:Name="CloseButton"
                            Grid.Row="0" Grid.Column="3"
                            Content="&#xE8BB;"
                            Style="{DynamicResource CloseButtonStyle}" />
                </Grid>

                <!-- Содержимое окна -->
                <ContentPresenter Grid.Row="2" Content="{TemplateBinding Content}" />

            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentIsMouseOvertBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelectedBrush }" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="Grid" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush }" />
    </Style>

    <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Margin" Value="{StaticResource AppMargin}" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource GroupBoxContentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                CornerRadius="4,4,0,0"
                                Background="{DynamicResource GroupBoxHeaderBrush}">
                            <TextBlock
                                FontFamily="{StaticResource AppFontFamily}"
                                Margin="10,5"
                                FontWeight="SemiBold">
                                <Run Text="{TemplateBinding Header}"
                                     Foreground="{TemplateBinding Foreground}" />
                            </TextBlock>
                        </Border>
                        <Border Grid.Row="1"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ListBox -->
    <Style x:Key="ModernListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <!-- Шаблон для ListBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer Style="{DynamicResource CustomScrollViewerStyle}"
                                      Focusable="false">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Стиль для элементов ListBox -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Padding" Value="2,2" />
                    <Setter Property="Margin" Value="0,2" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="0"
                                        CornerRadius="4"
                                        Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="8" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Индикатор выбранного элемента -->
                                        <Border x:Name="SelectionIndicator"
                                                Width="3"
                                                HorizontalAlignment="Left"
                                                Background="{DynamicResource SelectionIndicatorBrush}"
                                                CornerRadius="1.5"
                                                Opacity="0" />

                                        <!-- ContentPresenter для отображения содержимого -->
                                        <ContentPresenter Grid.Column="1"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Border>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush1}" />
                                    </Trigger>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush2}" />
                                    </Trigger>

                                    <!-- Ваши остальные триггеры -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                                        <Setter Property="Cursor" Value="Hand" />
                                    </Trigger>
                                    <!-- При выборе элемента -->
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                                        <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1" />
                                    </Trigger>
                                    <!-- Триггер для отключенного состояния -->
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для анимированного чекбокса -->
    <Style x:Key="JellyCheckboxStyle" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- Контейнер для чекбокса -->
                        <Border x:Name="CheckboxBorder"
                                Width="24" Height="24"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource Border1Brush}"
                                Background="Transparent"
                                CornerRadius="3"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="CheckboxScale" ScaleX="1" ScaleY="1" />
                            </Border.RenderTransform>
                            <!-- Галочка внутри чекбокса -->
                            <Path x:Name="Checkmark"
                                  Stroke="White"
                                  StrokeThickness="2"
                                  Data="M 6,12 L 10,16 L 18,7"
                                  Visibility="Hidden"
                                  Opacity="0"
                                  RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <ScaleTransform x:Name="CheckmarkScale" ScaleX="0" ScaleY="0" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>

                        <!-- Контент (текст или другой элемент) чекбокса -->
                        <ContentPresenter Grid.Column="1"
                                          Margin="5,0,0,0"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!-- Триггеры на основе DataTrigger -->
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
                                     Value="True">
                            <!-- 1. Устанавливаем цвет фона БЕЗ анимации -->
                            <Setter TargetName="CheckboxBorder" Property="Background"
                                    Value="{DynamicResource SetupButtonBrush}" />

                            <!-- 2. Запускаем анимации галочки и "желе" при активации триггера -->
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Анимация видимости и масштаба галочки -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation Storyboard.TargetName="Checkmark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="1" Duration="0:0:0.3" BeginTime="0:0:0.15" />

                                        <!-- Анимация желе для чекбокса -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale"
                                                                       Storyboard.TargetProperty="ScaleX">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="1.25" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="0.75" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="1.15" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="0.95" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="1.05" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale"
                                                                       Storyboard.TargetProperty="ScaleY">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="0.75" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="1.25" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="0.85" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="1.05" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="0.95" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>

                            <!-- 3. Запускаем анимацию скрытия галочки при деактивации триггера -->
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Скрываем галочку -->
                                        <DoubleAnimation Storyboard.TargetName="Checkmark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="0" Duration="0:0:0.2" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark"
                                                                       Storyboard.TargetProperty="Visibility"
                                                                       BeginTime="0:0:0.2"> <!-- Скрываем после затухания -->
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.0"
                                                                    Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
                                     Value="False">
                            <!-- Устанавливаем прозрачный фон БЕЗ анимации, когда чекбокс не отмечен -->
                            <Setter TargetName="CheckboxBorder" Property="Background" Value="Transparent" />
                            <!-- Enter/Exit Actions здесь не нужны, так как анимация скрытия/показа галочки
                             обрабатывается в Exit/Enter Actions триггера для IsChecked="True" -->
                        </DataTrigger>

                        <!-- Можно добавить другие триггеры, например, для IsMouseOver, IsPressed, IsEnabled -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Пример: немного увеличить рамку при наведении -->
                            <Setter TargetName="CheckboxBorder" Property="BorderBrush"
                                    Value="{DynamicResource Border2Brush}" /> <!-- Пример другого ресурса -->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckboxBorder" Property="Opacity" Value="0.5" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <!-- Пример -->
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <!-- Стиль для кнопки "Добавить" -->
    <Style x:Key="AddButtonStyle" TargetType="Button">

        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <!-- <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" /> -->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <TextBlock x:Name="ButtonText"
                                           Text="{TemplateBinding Content}"
                                           Foreground="White"
                                           FontWeight="SemiBold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Margin="0,0,39,0" />

                                <Border x:Name="IconBorder"
                                        HorizontalAlignment="Right"
                                        Width="39"><!-- Background="{DynamicResource SetupButtonBrush2}" -->
                                    <Path x:Name="PlusIcon"
                                          Data="M 12,6 L 12,18 M 6,12 L 18,12"
                                          Stroke="White"
                                          StrokeThickness="2"
                                          Width="24"
                                          Height="24"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="148" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,0,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="39" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,39,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter TargetName="IconBorder" Property="Background"
                                    Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#CCCCCC" />
                            <Setter Property="BorderBrush" Value="#AAAAAA" />
                            <Setter TargetName="IconBorder" Property="Background" Value="#AAAAAA" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="#888888" />
                            <Setter TargetName="PlusIcon" Property="Stroke" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BorderFolding" TargetType="Border">
        <Setter Property="Margin" Value="5 10 5 3" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>


    <Style x:Key="CustomScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track"
                                   IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageUpCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource VerticalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageDownCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HorizontalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageLeftCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource HorizontalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageRightCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для вертикального ползунка -->
    <Style x:Key="VerticalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Width="6"
                               Opacity="0.6"
                               MinHeight="30" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для горизонтального ползунка -->
    <Style x:Key="HorizontalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Height="6"
                               Opacity="0.6"
                               MinWidth="30" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ScrollViewer -->
    <Style x:Key="CustomScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.ColumnSpan="2" Grid.RowSpan="2" />

                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Style="{StaticResource CustomScrollBarStyle}" />

                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Orientation="Horizontal"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Style="{StaticResource HorizontalScrollBarStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CommonButton" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="Padding" Value="12,8" /> <!-- Горизонтальный отступ 12, вертикальный 8 -->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" /> <!-- Убрать минимальную ширину -->
        <Setter Property="MinHeight" Value="0" /> <!-- Убрать минимальную высоту -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            BorderThickness="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OutlineCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Padding" Value="15,8" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border1Brush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <ContentPresenter VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WindowBackgroundColor}" />
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
    </Style>
    <Style x:Key="ScrollViewerStyle" TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter />
                        <ScrollBar Grid.Column="1"
                                   x:Name="PART_VerticalScrollBar"
                                   Orientation="Vertical"
                                   Width="3"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ShadowSeparator" TargetType="Separator">
        <Setter Property="Height" Value="3" />
        <Setter Property="Background" Value="#BBBBBB" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Height="1">

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
        <Setter Property="Height" Value="auto" />
        <Setter Property="Margin" Value="0,0,0,10" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#E0E0E0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="2"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" />
                        </Border>
                        <TextBlock x:Name="Watermark"
                                   Text="Поиск"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Left"
                                   Margin="5,0,5,0"
                                   Foreground="Gray"
                                   Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="LightSkyBlue" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  
  

    <Style x:Key="BaseAnimatedArrowButtonHorizontal" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="30" /> <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="RootBorder" Background="Transparent">
                        <Grid ClipToBounds="True">
                            <Ellipse x:Name="OuterCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#F0EEEF">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Ellipse x:Name="InnerCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#96DAF0"
                                     Opacity="0">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1.3" ScaleY="1.3"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Canvas ClipToBounds="True"
                                    Width="{Binding ActualWidth, ElementName=RootBorder}"
                                    Height="{Binding ActualHeight, ElementName=RootBorder}"
                                    IsHitTestVisible="False">
                                <Grid x:Name="ButtonBox"
                                      Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource MultiplyConverter}, ConverterParameter=2}"
                                      Height="{Binding ActualHeight, ElementName=RootBorder}">
                                    <Grid.RenderTransform>
                                        <TranslateTransform x:Name="ButtonBoxTransform" X="0" Y="0" />
                                    </Grid.RenderTransform>

                                    <Path x:Name="Arrow1"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=180}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>

                                    <Path x:Name="Arrow2"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=1.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=180}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Canvas>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="MouseOverStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                         />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4"
                                                         />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5"
                                                       />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5"
                                                        />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.4"
                                                         />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseAnimatedArrowButtonVertical" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="30" /> <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="RootBorder" Background="Transparent">
                        <Grid ClipToBounds="True">
                            <Ellipse x:Name="OuterCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#F0EEEF">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="InnerCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#96DAF0"
                                     Opacity="0">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1.3" ScaleY="1.3"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Canvas ClipToBounds="True"
                                    Width="{Binding ActualWidth, ElementName=RootBorder}"
                                    Height="{Binding ActualHeight, ElementName=RootBorder}"
                                    IsHitTestVisible="False">
                                <Grid x:Name="ButtonBox"
                                      Width="{Binding ActualWidth, ElementName=RootBorder}"
                                      Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource MultiplyConverter}, ConverterParameter=2}">
                                    <Grid.RenderTransform>
                                        <TranslateTransform x:Name="ButtonBoxTransform" X="0" Y="0" />
                                    </Grid.RenderTransform>

                                    <Path x:Name="Arrow1"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left" VerticalAlignment="Top"
                                          Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=90}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>

                                    <Path x:Name="Arrow2"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;1.32;0.32;0.32}"
                                          HorizontalAlignment="Left" VerticalAlignment="Top"
                                          Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=90}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Canvas>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="MouseOverStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                          />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4"
                                                         />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5"
                                                      />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5"
                                                         />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="0" Duration="0:0:0.4"
                                                         />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                     />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                         />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5"
                                                         />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5"
                                                        />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4"
                                                          />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5"
                                                       />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5"
                                                      />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AnimatedArrowButtonLeft" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonHorizontal}">
        <Setter Property="Tag" Value="180" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonRight" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonHorizontal}">
        <Setter Property="Tag" Value="0" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonUp" TargetType="Button" BasedOn="{StaticResource BaseAnimatedArrowButtonVertical}">
        <Setter Property="Tag" Value="-90" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonDown" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonVertical}">
        <Setter Property="Tag" Value="90" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>
      <!-- Создание стиля для кнопок с иконкой -->
    <Style x:Key="ArrowTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="BaseArrowButton" TargetType="Button">

        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Margin" Value="1" />
    </Style>

    <Style x:Key="ButtonArrowRightStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AF;"
                               Style="{StaticResource ArrowTextBlockStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonArrowLeftStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0B0;"
                               Style="{StaticResource ArrowTextBlockStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonArrowUpStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AD;"
                               Style="{StaticResource ArrowTextBlockStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonArrowDownStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AE;"
                               Style="{StaticResource ArrowTextBlockStyle}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="CleanDataGridStyle" TargetType="DataGrid">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#DEE2E6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="RowHeight" Value="30" />
        <!-- Включаем отображение всех линий сетки -->
        <Setter Property="GridLinesVisibility" Value="All" />
        <!-- Задаем цвет вертикальных линий -->
        <Setter Property="VerticalGridLinesBrush" Value="#DEE2E6" />
        <!-- Задаем цвет горизонтальных линий -->
        <Setter Property="HorizontalGridLinesBrush" Value="#DEE2E6" />

        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0" />
    </Style>
    
     <!-- В стиле заголовка колонки добавляем правую границу -->
    <Style x:Key="CleanColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="#F8F9FA" />
        <Setter Property="Foreground" Value="#212529" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="BorderBrush" Value="#DEE2E6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>
                        <Border x:Name="BackgroundBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Grid.Column="0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  Margin="{TemplateBinding Padding}" />
                                <Thumb x:Name="PART_RightHeaderGripper"
                                       Grid.Column="1"
                                       HorizontalAlignment="Right"
                                       Width="8"
                                       Cursor="SizeWE">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Border Background="Transparent" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CleanCellStyle" TargetType="DataGridCell">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#E9ECEF" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CleanRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="White" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#F8F9FA" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#E9ECEF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SelectAllButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,8" />
        <Setter Property="Margin" Value="0,5,0,5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ToolTip" Value="Выбрать все" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#E8E8E8" TargetName="border" />
                            <Setter Property="BorderBrush" Value="#CCCCCC" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#D5D5D5" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xEA98;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="{DynamicResource BlueBrush}"
                               FontSize="22"
                               VerticalAlignment="Center" />

                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearSelectionButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,8" />
        <Setter Property="Margin" Value="5,5,0,5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ToolTip" Value="Очистить выбор" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#E8E8E8" TargetName="border" />
                            <Setter Property="BorderBrush" Value="#CCCCCC" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#D5D5D5" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xE8E6;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="{DynamicResource BlueBrush}"
                               FontSize="22"
                               VerticalAlignment="Center" />

                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SettingsButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xE713;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="Black"
                               FontSize="16"
                               Margin="0,0,5,0" />
                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>