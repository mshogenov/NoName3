<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:converters="clr-namespace:NoNameApi.Views.Converters"
                    xmlns:controls="clr-namespace:NoNameApi.Views.Controls">


    <converters:ScaleConverter x:Key="ScaleConverter" />
    <converters:ScaleMarginConverter x:Key="ScaleMarginConverter" />
    <converters:MultiplyConverter x:Key="MultiplyConverter" />
    <converters:NegationConverter x:Key="NegationConverter" />

    <!-- Общие значения -->
    <FontFamily x:Key="AppFontFamily">Segoe UI</FontFamily>
    <system:Double x:Key="AppFontSize">12</system:Double>
    <Thickness x:Key="AppMargin">10</Thickness>
    <FontWeight x:Key="AppFontWeight">Normal</FontWeight>
    <!-- Шаблон для окна -->
    <ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type Window}">
        <!-- Основная граница с тенью -->
        <Border x:Name="MainBorder"
                BorderBrush="{DynamicResource WindowBorderBrush}"
                BorderThickness="1"
                CornerRadius="7">
            <Border.Effect>
                <DropShadowEffect BlurRadius="7" ShadowDepth="0" Opacity="0.2" />
            </Border.Effect>

            <!-- Внутренний контейнер с фоном -->
            <Border Background="{TemplateBinding Background}"
                    CornerRadius="7">
                <Grid Margin="0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <!-- Заголовок окна с закругленными верхними углами -->
                    <Grid x:Name="PART_HeaderGrid"
                          Grid.Row="0"
                          Background="{DynamicResource WindowBackgroundBrush}"
                          Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag.HeaderHeight, FallbackValue=32}">
                        <!-- Маска для скругления верхних углов заголовка -->
                        <Grid.OpacityMask>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Border Background="Black"
                                            CornerRadius="7,7,0,0"
                                            Width="{Binding ActualWidth, ElementName=PART_HeaderGrid}"
                                            Height="{Binding ActualHeight, ElementName=PART_HeaderGrid}" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Grid.OpacityMask>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!-- Заголовок -->
                        <DockPanel Grid.Column="0"
                                   LastChildFill="True">
                            <!-- Добавляем TextBlock с привязкой к Title окна -->
                            <TextBlock VerticalAlignment="Center"
                                       Margin="10,0,0,0"
                                       FontWeight="Medium"
                                       FontFamily="{StaticResource AppFontFamily}"
                                       FontSize="13">
                                <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"
                                     Foreground="{DynamicResource TitleWindowBrush}" />
                            </TextBlock>

                            <!-- Если нужен кастомный заголовок, он добавится после текста -->
                            <ContentPresenter DockPanel.Dock="Right"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HeaderContent}"
                                              VerticalAlignment="Center" />
                        </DockPanel>

                        <!-- Кнопки управления окном с модифицированными стилями -->
                        <Button x:Name="MinimizeButton"
                                Grid.Row="0" Grid.Column="1"
                                Content="&#xE921;"
                                Margin="0,2,0,0"
                                Style="{DynamicResource WindowButtonStyle}" />

                        <Button x:Name="MaximizeButton"
                                Grid.Row="0" Grid.Column="2"
                                Content="&#xE922;"
                                Margin="0,2,0,0"
                                Style="{DynamicResource WindowButtonStyle}" />

                        <!-- Кнопка закрытия со скругленным правым верхним углом -->
                        <Button x:Name="CloseButton"
                                Grid.Row="0" Grid.Column="3"
                                Content="&#xE8BB;"
                                Margin="0,1,1,0"
                                Style="{DynamicResource CloseButtonStyle}">
                            <!-- Переопределяем шаблон для кнопки закрытия -->
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="ButtonBorder"
                                            Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"
                                            CornerRadius="0,7,0,0">
                                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ButtonBorder" Property="Background" Value="#FFE81123" />
                                            <Setter Property="Foreground" Value="White" />
                                        </Trigger>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="ButtonBorder" Property="Background" Value="#FF8B0A14" />
                                            <Setter Property="Foreground" Value="White" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>

                    <!-- Содержимое окна -->
                    <ContentPresenter Grid.Row="2" Content="{TemplateBinding Content}" />
                </Grid>
            </Border>
        </Border>

        <ControlTemplate.Triggers>
            <!-- Триггеры для обработки состояний окна -->
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="MaximizeButton" Property="Content" Value="&#xE923;" />
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
                <Setter TargetName="MaximizeButton" Property="Content" Value="&#xE922;" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- Стили для кнопок -->
    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TitleButtonContentIsMouseOvertBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelectedBrush }" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}"
           BasedOn="{StaticResource WindowButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <TextBlock x:Name="ButtonText"
                                           Text="{TemplateBinding Content}"
                                           Foreground="White"
                                           FontWeight="SemiBold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Margin="0,0,39,0" />

                                <Border x:Name="IconBorder"
                                        HorizontalAlignment="Right"
                                        Background="{DynamicResource SetupButtonBrush2}"
                                        Width="39">
                                    <Path x:Name="PlusIcon"
                                          Data="M 12,6 L 12,18 M 6,12 L 18,12"
                                          Stroke="White"
                                          StrokeThickness="2"
                                          Width="24"
                                          Height="24"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="148" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,0,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="IconBorder"
                                                     Storyboard.TargetProperty="Width"
                                                     To="39" Duration="0:0:0.3" />
                                    <ThicknessAnimation Storyboard.TargetName="ButtonText"
                                                        Storyboard.TargetProperty="Margin"
                                                        To="0,0,39,0" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource IsPressedButtonBrush}" />
                            <Setter TargetName="IconBorder" Property="Background"
                                    Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#CCCCCC" />
                            <Setter Property="BorderBrush" Value="#AAAAAA" />
                            <Setter TargetName="IconBorder" Property="Background" Value="#AAAAAA" />
                            <Setter TargetName="ButtonText" Property="Foreground" Value="#888888" />
                            <Setter TargetName="PlusIcon" Property="Stroke" Value="#888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CommonButtonStyle2" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="12,8" /> <!-- Горизонтальный отступ 12, вертикальный 8 -->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="0" /> <!-- Убрать минимальную ширину -->
        <Setter Property="MinHeight" Value="0" /> <!-- Убрать минимальную высоту -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            BorderThickness="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OutlineCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Padding" Value="15,8" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <ContentPresenter VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="#9E9E9E" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseAnimatedArrowButtonHorizontal" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="30" /> <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="RootBorder" Background="Transparent">
                        <Grid ClipToBounds="True">
                            <Ellipse x:Name="OuterCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#F0EEEF">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Ellipse x:Name="InnerCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#96DAF0"
                                     Opacity="0">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1.3" ScaleY="1.3"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Canvas ClipToBounds="True"
                                    Width="{Binding ActualWidth, ElementName=RootBorder}"
                                    Height="{Binding ActualHeight, ElementName=RootBorder}"
                                    IsHitTestVisible="False">
                                <Grid x:Name="ButtonBox"
                                      Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource MultiplyConverter}, ConverterParameter=2}"
                                      Height="{Binding ActualHeight, ElementName=RootBorder}">
                                    <Grid.RenderTransform>
                                        <TranslateTransform x:Name="ButtonBoxTransform" X="0" Y="0" />
                                    </Grid.RenderTransform>

                                    <Path x:Name="Arrow1"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=180}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>

                                    <Path x:Name="Arrow2"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=1.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=180}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Canvas>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="MouseOverStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="X"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BaseAnimatedArrowButtonVertical" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="30" /> <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="RootBorder" Background="Transparent">
                        <Grid ClipToBounds="True">
                            <Ellipse x:Name="OuterCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#F0EEEF">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="InnerCircle"
                                     Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.125}"
                                     StrokeThickness="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.071}"
                                     Stroke="#96DAF0"
                                     Opacity="0">
                                <Ellipse.RenderTransform>
                                    <ScaleTransform ScaleX="1.3" ScaleY="1.3"
                                                    CenterX="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}"
                                                    CenterY="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.375}" />
                                </Ellipse.RenderTransform>
                            </Ellipse>

                            <Canvas ClipToBounds="True"
                                    Width="{Binding ActualWidth, ElementName=RootBorder}"
                                    Height="{Binding ActualHeight, ElementName=RootBorder}"
                                    IsHitTestVisible="False">
                                <Grid x:Name="ButtonBox"
                                      Width="{Binding ActualWidth, ElementName=RootBorder}"
                                      Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource MultiplyConverter}, ConverterParameter=2}">
                                    <Grid.RenderTransform>
                                        <TranslateTransform x:Name="ButtonBoxTransform" X="0" Y="0" />
                                    </Grid.RenderTransform>

                                    <Path x:Name="Arrow1"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;0.32;0.32;0.32}"
                                          HorizontalAlignment="Left" VerticalAlignment="Top"
                                          Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=90}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow1, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>

                                    <Path x:Name="Arrow2"
                                          Width="{Binding ActualWidth, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Height="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleConverter}, ConverterParameter=0.357}"
                                          Margin="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource ScaleMarginConverter}, ConverterParameter=0.32;1.32;0.32;0.32}"
                                          HorizontalAlignment="Left" VerticalAlignment="Top"
                                          Fill="#F0EEEF"
                                          Stretch="Uniform"
                                          Data="M46 20.038c0-.7-.3-1.5-.8-2.1l-16-17c-1.1-1-3.2-1.4-4.4-.3-1.2 1.1-1.2 3.3 0 4.4l11.3 11.9H3c-1.7 0-3 1.3-3 3s1.3 3 3 3h33.1l-11.3 11.9c-1 1-1.2 3.3 0 4.4 1.2 1.1 3.3.8 4.4-.3l16-17c.5-.5.8-1.1.8-1.9z">
                                        <Path.RenderTransform>
                                            <RotateTransform
                                                Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag, TargetNullValue=90}"
                                                CenterX="{Binding ActualWidth, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}"
                                                CenterY="{Binding ActualHeight, ElementName=Arrow2, Converter={StaticResource ScaleConverter}, ConverterParameter=0.5}" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Canvas>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="MouseOverStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="FocusStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="0.7"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="{Binding ActualHeight, ElementName=RootBorder, Converter={StaticResource NegationConverter}}"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="OuterCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.3"
                                                         Duration="0:0:0.5" />
                                        <DoubleAnimation Storyboard.TargetName="InnerCircle"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.3"
                                                         Duration="0:0:0.5" />

                                        <DoubleAnimation Storyboard.TargetName="ButtonBoxTransform"
                                                         Storyboard.TargetProperty="Y"
                                                         To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AnimatedArrowButtonLeft" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonHorizontal}">
        <Setter Property="Tag" Value="180" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonRight" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonHorizontal}">
        <Setter Property="Tag" Value="0" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonUp" TargetType="Button" BasedOn="{StaticResource BaseAnimatedArrowButtonVertical}">
        <Setter Property="Tag" Value="-90" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="AnimatedArrowButtonDown" TargetType="Button"
           BasedOn="{StaticResource BaseAnimatedArrowButtonVertical}">
        <Setter Property="Tag" Value="90" /> <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="BaseArrowButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1.5"
                            CornerRadius="20"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="ContentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Focusable="False" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background"
                                    Value="{DynamicResource IsMouseOverBrush}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#E0E6EC" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background"
                                    Value="{DynamicResource IsSelectedBrush}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="#D0D7E0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Улучшенный стиль для TextBlock со стрелкой -->
    <Style x:Key="ArrowTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonArrowRightStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AF;"
                               Style="{StaticResource ArrowTextBlockStyle}">
                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ButtonArrowLeftStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0B0;"
                               Style="{StaticResource ArrowTextBlockStyle}">
                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonArrowUpStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AD;"
                               Style="{StaticResource ArrowTextBlockStyle}">
                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonArrowDownStyle" TargetType="Button" BasedOn="{StaticResource BaseArrowButton}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="&#xF0AE;"
                               Style="{StaticResource ArrowTextBlockStyle}">
                        <TextBlock.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.2" ScaleY="1.2" />
                            </TransformGroup>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SelectAllButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,8" />
        <Setter Property="Margin" Value="0,5,0,5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ToolTip" Value="Выбрать все" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xEA98;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="{DynamicResource SelectButtonForegroundBrush}"
                               FontSize="22"
                               VerticalAlignment="Center" />

                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearSelectionButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,8" />
        <Setter Property="Margin" Value="5,5,0,5" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ToolTip" Value="Очистить выбор" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xE8E6;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="{DynamicResource SelectButtonForegroundBrush}"
                               FontSize="22"
                               VerticalAlignment="Center" />

                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SettingsButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="ButtonGrid" Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Path x:Name="SettingsIcon"
                              Grid.Row="1" Width="20" Height="20" Stretch="Uniform"
                              Fill="{DynamicResource SettingsButtonBrush}"
                              RenderTransformOrigin="0.5,0.5"
                              Data="M19.43,12.98C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.48,5.31 14.87,5.07L14.49,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.51,2.42L9.13,5.07C8.52,5.31 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.98L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.52,18.69 9.13,18.93L9.51,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.49,21.58L14.87,18.93C15.48,18.69 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.98ZM12,15.5C10.07,15.5 8.5,13.93 8.5,12C8.5,10.07 10.07,8.5 12,8.5C13.93,8.5 15.5,10.07 15.5,12C15.5,13.93 13.93,15.5 12,15.5Z">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="IconRotation" Angle="0" />
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="RotateForwardStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="IconRotation"
                                            Storyboard.TargetProperty="Angle"
                                            From="0" To="60" Duration="0:0:0.4"
                                            AccelerationRatio="0.1" DecelerationRatio="0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="RotateForwardStoryboard" />
                                <BeginStoryboard Name="RotateBackStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="IconRotation"
                                            Storyboard.TargetProperty="Angle"
                                            To="0" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="ContinuousRotation">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="IconRotation"
                                            Storyboard.TargetProperty="Angle"
                                            From="-100" To="180" Duration="0:0:1"
                                            RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="ContinuousRotation" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SettingsButton" TargetType="Button"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Content">
            <Setter.Value>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="&#xE713;"
                               FontFamily="Segoe MDL2 Assets"
                               Foreground="Black"
                               FontSize="16"
                               Margin="0,0,5,0" />
                </StackPanel>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="CommonButtonStyle">
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Padding" Value="10,4" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Margin" Value="5 1 5 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Исправленный триггер для IsMouseOver -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background"
                                    Value="{DynamicResource IsMouseOverBrush}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <!-- Исправленный триггер для IsPressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Grid" TargetType="Grid">
        <Setter Property="Margin" Value="7" />
    </Style>
    <Style x:Key="Grid2" TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource ContentBrush }" />
    </Style>
    <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource GroupBoxContentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0"
                                CornerRadius="4,4,0,0"
                                Background="{DynamicResource GroupBoxHeaderBrush}">
                            <TextBlock
                                FontFamily="{StaticResource AppFontFamily}"
                                Margin="10,5"
                                FontWeight="SemiBold">
                                <Run Text="{TemplateBinding Header}"
                                     Foreground="{TemplateBinding Foreground}" />
                            </TextBlock>
                        </Border>
                        <Border Grid.Row="1"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="0,0,4,4">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ListBox -->
    <Style x:Key="ModernListBoxStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <!-- Шаблон для ListBox -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer Style="{DynamicResource CustomScrollViewerStyle}"
                                      Focusable="false">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Стиль для элементов ListBox -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">

                    <Setter Property="Padding" Value="2,2" />
                    <Setter Property="Margin" Value="0,2" />
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="0"
                                        CornerRadius="4"
                                        Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="8" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Индикатор выбранного элемента -->
                                        <Border x:Name="SelectionIndicator"
                                                Width="3"
                                                HorizontalAlignment="Left"
                                                Background="{DynamicResource SelectionIndicatorBrush}"
                                                CornerRadius="1.5"
                                                Opacity="0" />

                                        <!-- ContentPresenter для отображения содержимого -->
                                        <ContentPresenter Grid.Column="1"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Border>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush1}" />
                                    </Trigger>
                                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                        <Setter Property="Background" Value="{DynamicResource ItemsControlBrush2}" />
                                    </Trigger>

                                    <!-- Ваши остальные триггеры -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                                        <Setter Property="Cursor" Value="Hand" />
                                    </Trigger>
                                    <!-- При выборе элемента -->
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                                        <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1" />
                                    </Trigger>
                                    <!-- Триггер для отключенного состояния -->
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для анимированного чекбокса -->
    <Style x:Key="JellyCheckboxStyle" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- Контейнер для чекбокса -->
                        <Border x:Name="CheckboxBorder"
                                Width="20" Height="20"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource CheckboxBorderBrush}"
                                Background="Transparent"
                                CornerRadius="3"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="CheckboxScale" ScaleX="1" ScaleY="1" />
                            </Border.RenderTransform>
                            <!-- Галочка внутри чекбокса -->
                            <Path x:Name="Checkmark"
                                  Stroke="White"
                                  StrokeThickness="2"
                                  Data="M 5,10 L 8,13 L 15,6"
                                  Visibility="Hidden"
                                  Opacity="0"
                                  RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <ScaleTransform x:Name="CheckmarkScale" ScaleX="0" ScaleY="0" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>

                        <!-- Контент (текст или другой элемент) чекбокса -->
                        <ContentPresenter Grid.Column="1"
                                          Margin="5,0,0,0"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          RecognizesAccessKey="False" />
                    </Grid>

                    <!-- Триггеры на основе DataTrigger -->
                    <ControlTemplate.Triggers>
                        <!-- Триггер для отметки чекбокса (без анимации желе) -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
                                     Value="True">
                            <Setter TargetName="CheckboxBorder"
                                    Property="Background"
                                    Value="{DynamicResource SetupButtonBrush}" />

                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Анимация появления галочки -->
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark"
                                                                       Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.0"
                                                                    Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>

                                        <DoubleAnimation Storyboard.TargetName="Checkmark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0:0:0.3"
                                                         BeginTime="0:0:0.10" />

                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1" Duration="0:0:0.3"
                                                         BeginTime="0:0:0.10" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="1" Duration="0:0:0.3"
                                                         BeginTime="0:0:0.10" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>

                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Checkmark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="CheckmarkScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="0" Duration="0:0:0.2" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Checkmark"
                                                                       Storyboard.TargetProperty="Visibility"
                                                                       BeginTime="0:0:0.2">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.0"
                                                                    Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>

                        <!-- Триггер для анимации желе при нажатии -->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Анимация желе -->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale"
                                                                       Storyboard.TargetProperty="ScaleX">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="1.25" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="0.75" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="1.15" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="0.95" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="1.05" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckboxScale"
                                                                       Storyboard.TargetProperty="ScaleY">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.18" Value="0.75" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.24" Value="1.25" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.30" Value="0.85" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.39" Value="1.05" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.45" Value="0.95" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.6" Value="1.0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>

                        <!-- Остальные триггеры -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckboxBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource CheckboxBorderBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckboxBorder"
                                    Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
             </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>


    <Style x:Key="BorderFolding" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>


    <Style x:Key="CustomScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="8" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track"
                                   IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageUpCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource VerticalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageDownCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="HorizontalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Height" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Border Background="Transparent"
                                Padding="0">
                            <Track Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageLeftCommand"
                                                  Opacity="0" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource HorizontalScrollBarThumbStyle}" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="ScrollBar.PageRightCommand"
                                                  Opacity="0" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для вертикального ползунка -->
    <Style x:Key="VerticalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Width="6"
                               Opacity="0.6" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для горизонтального ползунка -->
    <Style x:Key="HorizontalScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="ThumbRect"
                               Fill="{DynamicResource ScrollBarThumbBrush}"
                               RadiusX="3"
                               RadiusY="3"
                               Height="6"
                               Opacity="0.6" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbRect" Property="Opacity" Value="1.0" />
                            <Setter TargetName="ThumbRect" Property="Fill"
                                    Value="{DynamicResource ScrollBarThumbPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для ScrollViewer -->
    <Style x:Key="CustomScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0"
                                                Content="{TemplateBinding Content}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False"
                                                CanVerticallyScroll="False"
                                                ContentTemplate="{TemplateBinding ContentTemplate}" />

                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Grid.Row="0"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Style="{StaticResource CustomScrollBarStyle}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Column="0"
                                   Grid.Row="1"
                                   Orientation="Horizontal"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Style="{StaticResource HorizontalScrollBarStyle}" />
                        <Rectangle Grid.Column="1" Grid.Row="1" Fill="Transparent" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
    </Style>

    <Style x:Key="ShadowSeparator" TargetType="Separator">
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </Style>
    <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
        <Setter Property="Height" Value="auto" />
        <Setter Property="Margin" Value="0,0,0,10" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush }" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="2"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" />
                        </Border>
                        <TextBlock x:Name="Watermark"
                                   Text="Поиск"
                                   FontSize="{StaticResource AppFontSize}"
                                   FontFamily="{StaticResource AppFontFamily}"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Left"
                                   Margin="5,0,5,0"
                                   Foreground="Gray"
                                   Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CleanDataGridStyle" TargetType="DataGrid">
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush }" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="RowHeight" Value="30" />
        <!-- Включаем отображение всех линий сетки -->
        <Setter Property="GridLinesVisibility" Value="All" />
        <!-- Задаем цвет вертикальных линий -->
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource BorderBrush}" />
        <!-- Задаем цвет горизонтальных линий -->
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />

        <Style.Resources>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource CustomScrollBarStyle}" />
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <!-- Это и есть верхний левый угол -->
                        <Rectangle x:Name="TopLeftCorner" Fill="{DynamicResource ContentBrush}"
                                   HorizontalAlignment="Left"
                                   Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=RowHeaderWidth}" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridRowHeaderStyle" TargetType="DataGridRowHeader">
        <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="SeparatorVisibility" Value="Collapsed" />
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRowHeader">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- В стиле заголовка колонки добавляем правую границу -->
    <Style x:Key="CleanColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>
                        <Border x:Name="BackgroundBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Grid.Column="0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  Margin="{TemplateBinding Padding}" />
                                <Thumb x:Name="PART_RightHeaderGripper"
                                       Grid.Column="1"
                                       HorizontalAlignment="Right"
                                       Width="8"
                                       Cursor="SizeWE">
                                    <Thumb.Template>
                                        <ControlTemplate TargetType="{x:Type Thumb}">
                                            <Border Background="Transparent" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CleanCellStyle" TargetType="DataGridCell">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter VerticalAlignment="Center"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CleanRowStyle" TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="InvisibleGridSplitter" TargetType="GridSplitter">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border Background="Transparent">
                        <!-- Убраны все визуальные элементы, но функциональность сохраняется -->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Height" Value="5" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Cursor" Value="SizeNS" />
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Cursor" Value="SizeWE" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="GridSplitterStyle" TargetType="GridSplitter">
        <Setter Property="Background" Value="#E0E0E0" />
        <Setter Property="BorderBrush" Value="#CCCCCC" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="#C0C0C0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="#A0A0A0"
                                            Duration="0:0:0.1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Rectangle x:Name="FocusVisualElement" Opacity="0" Stroke="#FF6DBDD1" StrokeThickness="1" />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Height" Value="5" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Cursor" Value="SizeNS" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridSplitter">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <ColorAnimation
                                                    Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                    To="#C0C0C0"
                                                    Duration="0:0:0.1" />
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <Storyboard>
                                                <ColorAnimation
                                                    Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                    To="#A0A0A0"
                                                    Duration="0:0:0.1" />
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Grid>
                                    <Rectangle x:Name="FocusVisualElement" Opacity="0" Stroke="#FF6DBDD1"
                                               StrokeThickness="1" />

                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="BorderContentStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="Padding" Value="5" />
    </Style>

    <Style x:Key="StatusBarStyle" TargetType="StatusBar">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="28" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Padding" Value="10,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="StatusBar">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="6"
                            SnapsToDevicePixels="True">
                        <ItemsPresenter Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для StatusBarItem в светлой теме -->
    <Style x:Key="StatusBarItemStyle" TargetType="StatusBarItem">
        <Setter Property="Padding" Value="8,0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

    </Style>

    <!-- Стиль для разделителя в StatusBar -->
    <Style x:Key="StatusBarSeparatorStyle" TargetType="Separator">
        <Setter Property="Background" Value="#E0E0E0" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Margin" Value="4,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Background="{TemplateBinding Background}"
                            Width="{TemplateBinding Width}"
                            Height="14"
                            SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ModernTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Height" Value="28" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CaretBrush" Value="#2196F3" />
        <Setter Property="SelectionBrush" Value="#B3E5FC" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden"
                                              Margin="{TemplateBinding Padding}" />
                                <TextBlock x:Name="Placeholder"
                                           Text="{TemplateBinding Tag}"
                                           Foreground="#AAAAAA"
                                           Visibility="Collapsed"
                                           IsHitTestVisible="False"
                                           Margin="{TemplateBinding Padding}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                        <Border x:Name="FocusBorder"
                                BorderThickness="0,0,0,2"
                                BorderBrush="#2196F3"
                                Opacity="0"
                                CornerRadius="2"
                                SnapsToDevicePixels="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.56" />
                            <Setter Property="Foreground" Value="#999999" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#AAAAAA" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <!-- Показываем плейсхолдер, когда текст пуст и контрол не в фокусе -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                                <Condition Property="IsFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Placeholder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Стиль для ProgressBar -->
    <Style x:Key="ModernProgressBar" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border BorderBrush="#E0E0E0"
                            BorderThickness="1"
                            CornerRadius="5"
                            Background="#FFFFFF">
                        <Grid x:Name="PART_Track">
                            <Rectangle x:Name="PART_Indicator"
                                       HorizontalAlignment="Left"
                                       Fill="#2196F3">
                                <Rectangle.Effect>
                                    <DropShadowEffect ShadowDepth="0"
                                                      BlurRadius="4"
                                                      Color="#2196F3"
                                                      Opacity="0.3" />
                                </Rectangle.Effect>
                            </Rectangle>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DeleteButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="28" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="buttonBorder"
                                Background="{TemplateBinding Background}"
                                CornerRadius="4">
                            <Viewbox Width="18" Height="18">
                                <Canvas Width="50" Height="59">
                                    <Path x:Name="BinPath1" Fill="#B5BAC1">
                                        <Path.Data>
                                            <PathGeometry>M0,7.5 C0,5.01472 2.01472,3 4.5,3 H45.5 C47.9853,3 50,5.01472 50,7.5 V7.5 C50,8.32843 49.3284,9 48.5,9 H1.5 C0.671571,9 0,8.32843 0,7.5 V7.5 Z</PathGeometry>
                                        </Path.Data>
                                    </Path>
                                    <Path x:Name="BinPath2" Fill="#B5BAC1">
                                        <Path.Data>
                                            <PathGeometry>M17,3 C17,1.34315 18.3431,0 20,0 H29.3125 C30.9694,0 32.3125,1.34315 32.3125,3 V3 H17 V3 Z</PathGeometry>
                                        </Path.Data>
                                    </Path>
                                    <Path x:Name="BinPath3" Fill="#B5BAC1">
                                        <Path.Data>
                                            <PathGeometry>M2.18565,18.0974 C2.08466,15.821 3.903,13.9202 6.18172,13.9202 H43.8189 C46.0976,13.9202 47.916,15.821 47.815,18.0975 L46.1699,55.1775 C46.0751,57.3155 44.314,59.0002 42.1739,59.0002 H7.8268 C5.68661,59.0002 3.92559,57.3155 3.83073,55.1775 L2.18565,18.0974 Z M18.0003,49.5402 C16.6196,49.5402 15.5003,48.4209 15.5003,47.0402 V24.9602 C15.5003,23.5795 16.6196,22.4602 18.0003,22.4602 C19.381,22.4602 20.5003,23.5795 20.5003,24.9602 V47.0402 C20.5003,48.4209 19.381,49.5402 18.0003,49.5402 Z M29.5003,47.0402 C29.5003,48.4209 30.6196,49.5402 32.0003,49.5402 C33.381,49.5402 34.5003,48.4209 34.5003,47.0402 V24.9602 C34.5003,23.5795 33.381,22.4602 32.0003,22.4602 C30.6196,22.4602 29.5003,23.5795 29.5003,24.9602 V47.0402 Z</PathGeometry>
                                        </Path.Data>
                                    </Path>
                                    <Path x:Name="BinPath4" Fill="#B5BAC1">
                                        <Path.Data>
                                            <PathGeometry>M2,13 H48 L47.6742,21.28 H2.32031 L2,13 Z</PathGeometry>
                                        </Path.Data>
                                    </Path>
                                </Canvas>
                            </Viewbox>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="buttonBorder" Property="Background" Value="#ED3838" />
                            <Setter TargetName="BinPath1" Property="Fill" Value="White" />
                            <Setter TargetName="BinPath2" Property="Fill" Value="White" />
                            <Setter TargetName="BinPath3" Property="Fill" Value="White" />
                            <Setter TargetName="BinPath4" Property="Fill" Value="White" />

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.95" ScaleY="0.95" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Стиль для кнопки "Добавить группу" -->
    <Style x:Key="AddButtonStyle2" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SetupButtonBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Padding" Value="5,5" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <!-- Иконка плюса -->
                            <Path Data="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"
                                  Fill="{TemplateBinding Foreground}"
                                  Width="14" Height="14"
                                  Stretch="Uniform"
                                  Margin="0,0,8,0"
                                  VerticalAlignment="Center" />
                            <ContentPresenter VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsMouseOverButtonBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IsPressedButtonBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteXSvgButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#B5BAC1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse x:Name="ButtonEllipse"
                                 Fill="Transparent"
                                 Width="24" Height="24" />
                        <!-- SVG-подобная иконка крестика -->
                        <Path x:Name="CrossPath"
                              Data="M6.4,6.4 L17.6,17.6 M6.4,17.6 L17.6,6.4"
                              Stroke="{TemplateBinding Foreground}"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Round"
                              StrokeEndLineCap="Round" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CrossPath" Property="Stroke" Value="#F44336" />
                            <Setter TargetName="CrossPath" Property="StrokeThickness" Value="2" />
                            <Setter TargetName="ButtonEllipse" Property="Fill" Value="#FFEBEE" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CrossPath" Property="Stroke" Value="#D32F2F" />
                            <Setter TargetName="ButtonEllipse" Property="Fill" Value="#FFCDD2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ListViewStyle" TargetType="ListView">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="FontSize" Value="{DynamicResource AppFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ScrollViewer Padding="{TemplateBinding Padding}"
                                      Focusable="False"
                                      Style="{DynamicResource CustomScrollViewerStyle}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- Стиль для ItemContainer -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListViewItem">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Margin" Value="1,0" />
                    <Setter Property="Padding" Value="8,6" />
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="VerticalContentAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <Border x:Name="ItemBorder"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="3"
                                        Padding="{TemplateBinding Padding}">
                                    <ContentPresenter
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource IsSelectedBrush}" />
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsSelected" Value="True" />
                                            <Condition Property="IsMouseOver" Value="True" />
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" Value="#BBDEFB" TargetName="ItemBorder" />
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Стиль для всплывающего окна Popup -->
    <Style x:Key="ModernPopupStyle" TargetType="Popup">
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="PopupAnimation" Value="Fade" />
        <Setter Property="StaysOpen" Value="False" />
        <Setter Property="Placement" Value="Bottom" />
        <Style.Resources>
            <!-- Стиль для границы Popup -->
            <Style x:Key="PopupBorderStyle" TargetType="Border">
                <Setter Property="Background" Value="White" />
                <Setter Property="BorderBrush" Value="#DDDDDD" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="CornerRadius" Value="6" />
                <Setter Property="Margin" Value="5" />
            </Style>

            <!-- Стиль для заголовка Popup -->
            <Style x:Key="PopupHeaderStyle" TargetType="TextBlock">
                <Setter Property="FontSize" Value="12" />
                <Setter Property="FontWeight" Value="SemiBold" />
                <Setter Property="Foreground" Value="#333333" />
                <Setter Property="Margin" Value="0,0,0,12" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Style>
        </Style.Resources>
    </Style>


    <Style x:Key="SaveButton" TargetType="Button">
        <Setter Property="Height" Value="35" />
        <Setter Property="Background" Value="#2196F3" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="15,0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#1976D2" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#1565C0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UpdateButton" TargetType="Button">
        <Setter Property="Height" Value="35" />
        <Setter Property="Background" Value="#4CAF50" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="15,0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#388E3C" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#2E7D32" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Стиль для элементов ListBox -->
    <Style x:Key="ModernListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Padding" Value="5,5" /> <!-- Увеличенные отступы -->
        <Setter Property="MinHeight" Value="20" /> <!-- Минимальная высота элемента -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                            Background="Transparent"
                            BorderBrush="#F0F0F0">
                        <ContentPresenter VerticalAlignment="Center" /> <!-- Центрирование содержимого по вертикали -->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#E3F2FD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#F5F5F5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Стиль для текста внутри ListBoxItem -->
    <Style x:Key="ListBoxItemTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="13" /> <!-- Увеличенный размер шрифта -->
        <Setter Property="Margin" Value="5,2" /> <!-- Дополнительный отступ сверху и снизу -->
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style x:Key="AnimatedCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="#2D3436" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#74B9FF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Width="18"
                                Height="18"
                                CornerRadius="3">
                            <Path x:Name="checkMark"
                                  Data="M 2,7 L 7,12 L 14,3"
                                  Stroke="#74B9FF"
                                  StrokeThickness="2"
                                  Opacity="0">
                                <Path.RenderTransform>
                                    <ScaleTransform ScaleX="0" ScaleY="0"
                                                    CenterX="9" CenterY="7.5" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ContentPresenter Grid.Column="1"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}">

                            <ContentPresenter.Resources>
                                <!-- Стиль для текстового содержимого -->
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontFamily"
                                            Value="{Binding FontFamily, RelativeSource={RelativeSource AncestorType=CheckBox}}" />
                                    <Setter Property="FontSize"
                                            Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType=CheckBox}}" />
                                    <Setter Property="Foreground" Value="#2D3436" />
                                    <Setter Property="VerticalAlignment" Value="Center" />
                                    <Setter Property="FontWeight" Value="Regular" />
                                    <!-- Дополнительные эффекты при наведении -->
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Foreground" Value="#0984E3" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                         To="1" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                         To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleX"
                                                         To="0" Duration="0:0:0.2" />
                                        <DoubleAnimation Storyboard.TargetName="checkMark"
                                                         Storyboard.TargetProperty="RenderTransform.ScaleY"
                                                         To="0" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Background" Value="#F1F9F5" TargetName="checkBoxBorder" />
                            <Setter Property="BorderBrush" Value="#74B9FF" TargetName="checkBoxBorder" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="#74B9FF" TargetName="checkBoxBorder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TabControl -->
    <!-- Стиль для границы заголовка с явными триггерами событий мыши -->
    <Style x:Key="HeaderBorderStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource LightWindowBrush}" />
        <Setter Property="Padding" Value="10,5" />
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background">
                            <DiscreteObjectKeyFrame KeyTime="0:0:0"
                                                    Value="{DynamicResource IsMouseOverBrush}" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background">
                            <DiscreteObjectKeyFrame KeyTime="0:0:0"
                                                    Value="{DynamicResource LightWindowBrush}" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TabControl" x:Key="TabControlStyle">
        <Setter Property="Background" Value="{DynamicResource LightWindowBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightWindowBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />  <!-- Область заголовков -->
                            <RowDefinition Height="*" />     <!-- Область содержимого -->
                        </Grid.RowDefinitions>

                        <!-- Панель заголовков вкладок -->
                        <TabPanel x:Name="HeaderPanel"
                                  Panel.ZIndex="1"
                                  Grid.Row="0"
                                  Margin="0"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1" />

                        <!-- Содержимое активной вкладки -->
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent"
                                              Margin="5" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TabItem" x:Key="TabItemStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="HeaderBorder"
                            Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="4,4,0,0"
                            Margin="0,0,2,0">
                        <ContentPresenter x:Name="ContentSite"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          ContentSource="Header"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Подсветка при наведении мыши -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HeaderBorder" Property="Background"
                                    Value="{DynamicResource IsMouseOverBrush}" />
                        </Trigger>

                        <!-- Стиль для выбранной вкладки -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="HeaderBorder" Property="Background"
                                    Value="{DynamicResource LightWindowBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox -->
    <Style x:Key="ModernComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ModernComboBoxItemStyle}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MaxDropDownHeight" Value="200" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                            Name="ToggleButton"
                            Template="{DynamicResource ComboBoxToggleButton}"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Foreground="{DynamicResource TextBlockColorBrush}"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Margin="10,3,23,3"
                                 Focusable="True"
                                 Background="Transparent"
                                 Visibility="Hidden"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid
                                Name="DropDown"
                                SnapsToDevicePixels="True"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="{DynamicResource ComboBoxPopupBackground}"
                                    BorderThickness="1"
                                    BorderBrush="{DynamicResource ComboBoxPopupBorderBrush}"
                                    Margin="2 0" />
                                <ScrollViewer Margin="4,6,4,6"
                                              SnapsToDevicePixels="True"
                                              Style="{DynamicResource CustomScrollViewerStyle}">
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                Margin="5 2" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="Border"
                Grid.ColumnSpan="2"
                CornerRadius="4"
                Background="{DynamicResource ComboBoxBackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1" />
            <Border
                Grid.Column="0"
                CornerRadius="4,0,0,4"
                Margin="1"
                Background="{DynamicResource ComboBoxBackgroundBrush}" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                Fill="{DynamicResource ComboBoxArrowFill}"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource IsMouseOverBrush}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource IsSelectedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxDisabledBackground}" />
                <Setter TargetName="Border" Property="BorderBrush"
                        Value="{DynamicResource ComboBoxDisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ComboBoxDisabledForeground}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource ComboBoxDisabledArrowFill}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ModernComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="Padding" Value="5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="ItemBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="1">
                        <ContentPresenter Margin="5,2" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Стиль для выбранного элемента -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBorder" Property="Background"
                                    Value="{DynamicResource IsSelectedBrush}" />
                        </Trigger>
                        <!-- Стиль при наведении мыши -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBorder" Property="Background"
                                    Value="{DynamicResource IsMouseOverBrush}" />
                        </Trigger>
                        <!-- Стиль для отключенного состояния -->
                        <!-- <Trigger Property="IsEnabled" Value="False"> -->
                        <!--     <Setter Property="Foreground" Value="{DynamicResource ComboBoxDisabledForeground}" /> -->
                        <!-- </Trigger> -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost"
                Focusable="False"
                Background="{TemplateBinding Background}" />
    </ControlTemplate>


    <Style x:Key="ModernTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ModernTreeViewItemStyle}" />
        <Setter Property="FontSize" Value="{StaticResource AppFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Focusable="False"
                                      Style="{DynamicResource CustomScrollViewerStyle}"
                                      Padding="{TemplateBinding Padding}"
                                      CanContentScroll="True"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Background" Value="{DynamicResource ContentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBlockColorBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!-- Expand/Collapse Button -->
                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Margin="1,0,1,0">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Focusable" Value="False" />
                                    <Setter Property="Width" Value="16" />
                                    <Setter Property="Height" Value="16" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border Width="16" Height="16" Background="Transparent">
                                                    <Path x:Name="ExpandPath"
                                                          Fill="{DynamicResource TextBlockColorBrush}"
                                                          Stroke="{DynamicResource TextBlockColorBrush}"
                                                          StrokeThickness="1">
                                                        <Path.Data>
                                                            <PathGeometry Figures="M 4 7 L 12 7 M 8 3 L 8 11" />
                                                        </Path.Data>
                                                    </Path>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter Property="Data" TargetName="ExpandPath">
                                                            <Setter.Value>
                                                                <PathGeometry Figures="M 4 7 L 12 7" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>

                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>

                        <!-- Header content -->
                        <Border x:Name="Bd" Grid.Row="0" Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="3">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>

                        <!-- Child items -->
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Margin="0,1,0,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                        </Trigger>

                        <!-- Убираем выделение для IsSelected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource IsMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>